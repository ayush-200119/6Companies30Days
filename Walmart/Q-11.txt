class Solution {
public:
    int mod=1000000007;
    
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        
        vector<pair<int,int>> engineer(n);
        
        for(int i=0;i<n;i++)
        {
            engineer[i]={efficiency[i],speed[i]};
        }
        
        sort(engineer.rbegin(),engineer.rend());
        
        priority_queue<int,vector<int>,greater<int>> pq;
        long long int ans=0;
        long long int sum=0;
        long long int minE;
        
        for(int i=0;i<k;i++)
        {
            sum+=engineer[i].second;
            minE=engineer[i].first;
            ans=max(ans,((sum)*(minE)));
            pq.push(engineer[i].second);
        }
        
        for(int i=k;i<n;i++)
        {
            if(engineer[i].second > pq.top())
            {
                sum=sum-pq.top();
                sum=sum+engineer[i].second;
                minE=engineer[i].first;
                ans=max(ans,((sum)*(minE)));
                pq.pop();
                pq.push(engineer[i].second);
            }
        }
               
        return (ans%mod);
        
    }
};