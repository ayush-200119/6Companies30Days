/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    bool isSame(vector<vector<int>> &grid,int rs,int cs,int curr_n)
    {
        if(curr_n==1)
        {
            return true;
        }
        
        int check=grid[rs][cs];
        
        for(int i=rs;i<rs+curr_n;i++)
        {
            for(int j=cs;j<cs+curr_n;j++)
            {
                if(grid[i][j]!=check)
                    return false;
            }
        }
        
        return true;
    }
    
    Node *solve(vector<vector<int>> &grid,int rs,int cs,int curr_length)
    {
        if(isSame(grid,rs,cs,curr_length))
        {
            //is a leaf node
            //getting the value
            bool val=(grid[rs][cs]==1?true:false);
            Node *head=new Node(val,true);
            return head;
        }
        
        //not a leaf node
        int next_len=curr_length/2;
        
        Node *topLeft=solve(grid,rs,cs,next_len);
        Node *topRight=solve(grid,rs,cs+next_len,next_len);
        Node *bottomLeft=solve(grid,rs+next_len,cs,next_len);
        Node *bottomRight=solve(grid,rs+next_len,cs+next_len,next_len);
        
        Node *head=new Node(false,false,topLeft,topRight,bottomLeft,bottomRight);
        
        return head;
    }
    
    Node* construct(vector<vector<int>>& grid) {
        
        int dimension=grid.size();
        
        return solve(grid,0,0,dimension);
        
        
    }
};