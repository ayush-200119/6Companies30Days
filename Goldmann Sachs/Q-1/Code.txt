//Solution Accepted on GFG


//Initial Template for C++
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;


 // } Driver Code Ends
//User function Template for C++

class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& string_list) {
        //code here
        unordered_map<string,int> mp;
        int size=string_list.size();
        
        vector<vector<string>> res;
        
        for(int i=0;i<size;i++)
        {
            string temp=string_list[i];
            
            sort(temp.begin(),temp.end());
            
            if(mp.find(temp)!=mp.end())
            {
                //if the sorted version is found ,then the string is a anagram
                int index=mp[temp];//getting index from map
                res[index].push_back(string_list[i]);
            }
            else
            {
                int res_size=res.size();
                //inserting a new entry into the map with its index
                mp[temp]=res_size;
                
                res.push_back({string_list[i]});
                
            }
            
        }
        
        return res;
        
    }
};

// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<string> string_list(n);
        for (int i = 0; i < n; ++i)
            cin>>string_list[i]; 
        Solution ob;
        vector<vector<string> > result = ob.Anagrams(string_list);
        sort(result.begin(),result.end());
        for (int i = 0; i < result.size(); i++)
        {
            for(int j=0; j < result[i].size(); j++)
            {
                cout<<result[i][j]<<" ";
            }
            cout<<"\n";
        }
    }

    return 0;
}
  // } Driver Code Ends