

 // } Driver Code Ends
 

struct element
{
  int value;
  int index;
};

struct compare{
    bool operator()(element const &e1,element const &e2)
    {
        return e1.value<e2.value;
    }
};

class Solution
{
  public:
    vector<int> max_of_subarrays(vector<int> arr, int n, int k) {
        // your code here
        priority_queue<element,vector<element>,compare> pq;
        
        vector<int> res;
        
        for(int i=0;i<k;i++)
        {
            pq.push({arr[i],i});
        }
        
        res.push_back(pq.top().value);
        
        //traversing the array
        for(int i=k;i<n;i++)
        {
            int index=pq.top().index;
            
            // if(index==i-k)
            // {
            //     pq.pop();
            // }
            
            //adding the last element of the current window
            
            pq.push({arr[i],i});
            
            //finding the max for the current window
            while(pq.top().index<=i-k)
            {
                pq.pop();
            }
            
            res.push_back(pq.top().value);
            
        }
        
        return res;
        
    }
};

// { Driver Code Starts.

int main() {

    int t;
    cin >> t;

    while (t--) {

        int n, k;
        cin >> n >> k;

        vector<int> arr(n);
        for (int i = 0; i < n; i++) cin >> arr[i];
        Solution ob;
        vector<int> res = ob.max_of_subarrays(arr, n, k);
        for (int i = 0; i < res.size(); i++) cout << res[i] << " ";
        cout << endl;
    }

    return 0;
}  // } Driver Code Ends