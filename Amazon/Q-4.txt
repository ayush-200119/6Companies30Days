// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:

    struct element{
        int value;
        int partition;
    };

    int solve(int i,int j,int p[],vector<vector<element>> &dp)
    {
        //base condition
        if(i>=j)
        {
            dp[i][j]= {0,-1};
            return dp[i][j].value;
        }
        
        if(dp[i][j].value!=-1)
        return dp[i][j].value;
        
        int ans=INT_MAX;
        int partition_index=-1;
        
        for(int k=i;k<j;k++)
        {
            int temp_ans=solve(i,k,p,dp)+solve(k+1,j,p,dp)+(p[i-1]*p[k]*p[j]);
            if(temp_ans<ans)
            {
                ans=temp_ans;
                partition_index=k;
            }
        }
        
        dp[i][j]= {ans,partition_index};
        
        return dp[i][j].value;
    }
    
    void stringify(int i,int j,string &res,vector<vector<element>> &dp)
    {
        if(i==j)
        {
            return;
        }
        
        int index1=res.find('A'+i-1);
        res.insert(index1,"(");
        
        int index2=res.find('A'+j-1);
        res.insert(index2+1,")");
        
        int partition=dp[i][j].partition;
        
        //GO FOR THE REMAINING STRINGS  
        stringify(i,partition,res,dp);
        stringify(partition+1,j,res,dp);
        
        
    }
    
    string matrixChainOrder(int p[], int n){
        // code here
        // vector<int> partitions;
        vector<vector<element>> dp;
        
        for(int i=0;i<n;i++)
        {
            vector<element> temp;
            for(int j=0;j<n;j++)
                temp.push_back({-1,-1});
            
            dp.push_back(temp);
        }
        
         solve(1,n-1,p,dp);
        
        string res="";
        
        for(int i=0;i<n-1;i++)
        {
            res+=('A'+i);
        }
        
        
        stringify(1,n-1,res,dp);
        
        return res;
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int p[n];
        for(int i = 0;i < n;i++)
            cin>>p[i];
        
        Solution ob;
        cout<<ob.matrixChainOrder(p, n)<<"\n";
    }
    return 0;
}  // } Driver Code Ends