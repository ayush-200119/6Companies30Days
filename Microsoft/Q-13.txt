#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
    //Function to find if the given edge is a bridge in graph.
    
    void leftShift(vector<int> &v,int index)
    {
        for(int i=index+1;i<v.size();i++)
        {
            v[i-1]=v[i];
        }
        
        //removing the last element
        v.erase(v.end()-1);
    }
    
    void dfs(vector<int> adj[],int source,bool visited[])
    {
        visited[source]=true;
        
        for(const auto &u:adj[source])
        {
            if(!visited[u])
            {
                dfs(adj,u,visited);
            }
        }
        
    }
    
    int connectedComponents(vector<int> adj[],int V)
    {
        int count=0;
        bool visited[V];
        for(int i=0;i<V;i++)
        {
            visited[i]=false;
        }
        
        for(int i=0;i<V;i++)
        {
            if(visited[i]==false)
            {
                count++;
                dfs(adj,i,visited);
            }
        }
        
        return count;
    }
    
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
        // Code here
        
        int orgCount=connectedComponents(adj,V);
        
        for(int i=0;i<adj[c].size();i++)
        {
            if(adj[c][i]==d)
            {
                leftShift(adj[c],i);
                break;
            }
        }
        
        //removing c from d
        for(int i=0;i<adj[d].size();i++)
        {
            if(adj[d][i]==c)
            {
                leftShift(adj[d],i);
                break;
            }
        }
        
        int modCount=connectedComponents(adj,V);
        
        return (orgCount!=modCount);
        
    }
};

// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        int i=0;
        while (i++<E) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back (v);
            adj[v].push_back (u);
        }
        
        int c,d;
        cin>>c>>d;
        
        Solution obj;
    	cout << obj.isBridge(V, adj, c, d) << "\n";
    }

    return 0;
}

  // } Driver Code Ends