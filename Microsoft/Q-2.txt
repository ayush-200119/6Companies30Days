#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
    bool isCycle(vector<vector<int>> &adj,int source,bool visited[],bool rs[])
    {
        visited[source]=true;
        rs[source]=true;
        
        //visiting all adjacents
        for(auto u:adj[source])
        {
            //can visit
            if(visited[u]==false)
            {
                if(isCycle(adj,u,visited,rs))
                {
                    return true;
                }
            }
            else if(rs[u]==true)//it is already visited
            {
                return true;
            }
        }
        
        rs[source]=false;
        return false;
    }
    
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    
	    vector<vector<int>> adj;
	    
	    for(int i=0;i<N;i++)
	    {
	        vector<int> temp;
	        adj.push_back(temp);
	    }
	    
	    //pushing the edges to the adjacency list
	    
	    for(int i=0;i<prerequisites.size();i++)
	    {
	        int f=prerequisites[i].first;
	        int s=prerequisites[i].second;
	        
	        //adding a edge between s and f
	        adj[s].push_back(f);
	    }
	    
	    
	    //detecting a cycle if it exists
	    
	    bool visited[N];
	    bool rs[N];
	    
	    for(int i=0;i<N;i++)
	    {
	        visited[i]=false;
	        rs[i]=false;
	    }
	    
	    for(int i=0;i<N;i++)
	    {
	        if(visited[i]==false)
	        {
	            //if edge found return false
	            if(isCycle(adj,i,visited,rs))
	                return false;
	        }
	    }
	    
	    return true;
	    
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        // string s;
        // cin>>s;
        Solution ob;
        if (ob.isPossible(N, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}  // } Driver Code Ends