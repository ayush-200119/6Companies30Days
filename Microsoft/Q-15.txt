// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
    public:
    
    int findDiff(string s1,string s2)
    {
        int i=0;
        int j=0;
        
        int ans=-1;
        
        while(i<s1.length() && j<s2.length())
        {
            if(s1[i]!=s2[j])
            {
                ans=i;
                return ans;
            }
            
            i++;
            j++;
        }
        
        return ans;
    }
    
    void topologicalSort(vector<int> adj[],int source,bool visited[],string &res)
    {
        visited[source]=true;
        
        //visiting all adjacents
        for(auto u:adj[source])
        {
            if(visited[u]==false)
            {
                topologicalSort(adj,u,visited,res);
            }
        }
        
        //the current source is safe to add
        res+=(source+'a');
    }
    
    string findOrder(string dict[], int N, int K) {
        //code here
        vector<int> adj[K];
        
        //formation of graph
        for(int i=1;i<N;i++)
        {
            int index=findDiff(dict[i-1],dict[i]);
            if(index!=-1)
            {
                char s1=dict[i-1][index];
                char s2=dict[i][index];
                
                //forming a outgoing edge between s1 and s2
                adj[s1-'a'].push_back(s2-'a');
            }
        }
        
        string res="";
        bool visited[K];
        for(int i=0;i<K;i++)
        {
            visited[i]=false;
        }
        
        for(int i=0;i<K;i++)
        {
            if(visited[i]==false)
            {
                topologicalSort(adj,i,visited,res);
            }
        }
        
        
        reverse(res.begin(),res.end());
        
        return res;
    }
};

// { Driver Code Starts.
string order;
bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size()) return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;
        string dict[N];
        for (int i = 0; i < N; i++) cin >> dict[i];
        
        Solution obj;
        string ans = obj.findOrder(dict, N, K);
        order = "";
        for (int i = 0; i < ans.size(); i++) order += ans[i];

        string temp[N];
        std::copy(dict, dict + N, temp);
        sort(temp, temp + N, f);

        bool f = true;
        for (int i = 0; i < N; i++)
            if (dict[i] != temp[i]) f = false;

        if(f)cout << 1;
        else cout << 0;
        cout << endl;
    }
    return 0;
}
  // } Driver Code Ends