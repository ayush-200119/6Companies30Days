#include<bits/stdc++.h>
using namespace std;
#define N 1000


 // } Driver Code Ends
// you are required to complete this function 
// function should print the required range

struct element{
    int data;
    int row;
    int column;
    element(int d,int r,int c)
    {
        data=d;
        row=r;
        column=c;
    }
};

struct comparator {
bool operator()(element &e1,element &e2)
{
    if(e1.data>e2.data)
    return true;
    
    return false;
}
};
 
class Solution{
    public:
    pair<int,int> findSmallestRange(int KSortedArray[][N], int n, int k)
    {
          //code here
          if(k==1)
          {
              return {KSortedArray[0][0],KSortedArray[0][0]};
          }
          else
          {
              priority_queue<element,vector<element>,comparator> pq;
              pair<int,int> ans={-1,-1};
              int large=INT_MIN;
              for(int i=0;i<k;i++)
              {
                  pq.push(element(KSortedArray[i][0],i,0));
                  large=max(large,KSortedArray[i][0]);
              }
              int index=-1;
              
              while(index!=n-1)
              {
                  element temp=pq.top();
                  pq.pop();
                  int low=temp.data;
                  index=temp.column;
                  
                  if(ans.first==-1)
                  {
                      ans.first=low;
                      ans.second=large;
                  }
                  else
                  {
                      if((ans.second-ans.first)>(large-low))
                      {
                          ans.first=low;
                          ans.second=large;
                      }
                  }
                  
                  //insertion step
                  if(index!=n-1)
                  {
                      pq.push(element(KSortedArray[temp.row][index+1],temp.row,index+1));
                      large=max(large,KSortedArray[temp.row][index+1]);
                  }
              }
              
              return ans;
              
          }
    }
};

// { Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, k;
        cin>>n>>k;
        int arr[N][N];
        pair<int,int> rangee;
        for(int i=0; i<k; i++)
            for(int j=0; j<n; j++)
                cin>>arr[i][j];
        Solution obj;
	    rangee = obj.findSmallestRange(arr, n, k);
	    cout<<rangee.first<<" "<<rangee.second<<"\n";
    }   
	return 0;
}

  // } Driver Code Ends