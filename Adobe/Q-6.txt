//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


 // } Driver Code Ends
//User function Template for C++

// N is the number of pairs of parentheses
// Return list of all combinations of balanced parantheses
class Solution
{
    public:
    
    void addStrings(int n,string &temp,vector<string> &res,int lCount,int rCount)
    {
        if(temp.length()==2*n)
        {
            res.push_back(temp);
            return;
        }
        if(lCount<n)
        {
            temp+='(';
            addStrings(n,temp,res,lCount+1,rCount);
            temp.erase(temp.end()-1);
        }
       
       //initial mistake doen here:(The right parenthesis should be added for each case)
       // if at any moment right parenthesis exceeds the left then return
        if(rCount<lCount)
        {    
            temp+=')';
            addStrings(n,temp,res,lCount,rCount+1);
            temp.erase(temp.end()-1);
        }
        return;
    }
    
    
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here 
        string temp;
        vector<string> res;
        addStrings(n,temp,res,0,0);
        
        return res;
    }
};

// { Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 
  // } Driver Code Ends