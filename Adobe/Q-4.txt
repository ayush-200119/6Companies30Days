// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

//Coding the top-down approach first(to avoid Seg Fault)

class Solution{
public:

    bool findSubsetSum(int arr[],int N,int sum,vector<vector<int>> &dp)
    {
        if(dp[N][sum]==-1)
        {
            if(sum==0)
            {
                dp[N][sum]=1;
                return dp[N][sum];
            }
            if(N==0)
            {
                dp[N][sum]=0;
                return dp[N][sum];
            }
            
            if(arr[N-1]<=sum)
            {
                dp[N][sum]=(findSubsetSum(arr,N-1,sum-arr[N-1],dp)||findSubsetSum(arr,N-1,sum,dp));
            }
            else
            {
                dp[N][sum]=findSubsetSum(arr,N-1,sum,dp);
            }
        }
        return dp[N][sum];
    }
    
    bool subsetSum(int arr[],int N,int sum)
    {
        vector<vector<int>> dp;
        
        for(int i=0;i<N+1;i++)
        {
            vector<int> temp;
            for(int j=0;j<sum+1;j++)
            {
                temp.push_back(-1);
            }
            dp.push_back(temp);
        }
        
        return findSubsetSum(arr,N,sum,dp);
    }

    int equalPartition(int N, int arr[])
    {
        // code here
        long long sum=0;
        for(int i=0;i<N;i++)
        {
            sum=sum+arr[i];
        }
        
        if(sum%2!=0)
        return false;
        
        return subsetSum(arr,N,sum/2);
        
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        if(ob.equalPartition(N, arr))
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
    return 0;
}  // } Driver Code Ends